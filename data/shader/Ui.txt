#include "ConstantHeader.txt"
struct VS_in
{
	float3 p : POSITION;
	float3 n : NORMAL;
	float4 c : COLOR;
	float2 t : TEXCOORD;
};
struct VS_out
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float angle : TEXCOORD1;
};

VS_out VS(VS_in input)
{
	VS_out output = (VS_out)0;

	output.p = float4(input.p, 1.0f);
	output.p = mul(output.p, g_matWorld);
	output.p = mul(output.p, g_matView);
	output.p = mul(output.p, g_matProj);
	output.n = input.n;
	output.c = input.c;
	output.t = input.t;
	output.angle = g_fTimer;
	return output;
}

float4 PS(VS_out input) : SV_Target
{
	float4 vColor = g_txTexA.Sample(g_SampleWrap , input.t);
	return vColor * input.c;
}
float4 ANGLE_PS(VS_out input) : SV_Target
{
	float4 color = g_txTexA.Sample(g_SampleWrap , input.t);
    	float2 center = float2(0.5f, 0.5f);
	float2 direction = normalize(input.t - center);
    	float angle = atan2(direction.x, -direction.y); // y축 방향이 반대이므로 -direction.y를 사용합니다.
	angle = angle * 180.0f / 3.141592f;
	angle = angle < 0 ? angle + 360 : angle; // 각도를 0~360도 사이 값으로 만듭니다.

    	// 시계 방향으로 페이드인 되는 효과를 생성하기 위해선
    	// distance와 angle을 사용하여 색상값을 계산합니다.
    	float alpha;
	if (angle < input.angle)
	{
    		alpha = color.a;
	}
	else
	{
    		alpha = 0.0f;
	}
    	return float4(color.rgb, alpha);
}

float4 COLOR_PS(VS_out input) : SV_Target
{
	return input.c;
}